<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\RTX_ex2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\RTX_ex2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Fri May 18 12:00:19 2012
<BR><P>
<H3>Maximum Stack Usage =         92 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
svcKernelStart &rArr; rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9]">SysTick_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">DEF_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DEF_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[a]">DEF_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[d]">SystemInit</a> from system_armcm3.o(.text) referenced from startup_armcm3.o(.text)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_armcm3.o(.text)
 <LI><a href="#[11]">job1</a> from rtx_ex2.o(.text) referenced from rtx_ex2.o(.constdata)
 <LI><a href="#[12]">job2</a> from rtx_ex2.o(.text) referenced from rtx_ex2.o(.constdata)
 <LI><a href="#[13]">job3</a> from rtx_ex2.o(.text) referenced from rtx_ex2.o(.constdata)
 <LI><a href="#[10]">main</a> from rtx_ex2.o(.text) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[2c]">osThreadExit</a> from rt_cmsis.o(.text) referenced 2 times from rt_cmsis.o(.text)
 <LI><a href="#[f]">os_idle_demon</a> from rtx_conf_cm.o(.text) referenced from rt_task.o(.text)
 <LI><a href="#[b]">rt_alloc_box</a> from rt_membox.o(.text) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[c]">rt_free_box</a> from rt_membox.o(.text) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[37]">svcDelay</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[2f]">svcKernelStart</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[6c]">svcMailCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[2d]">svcMessageCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[45]">svcMessageGet</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[69]">svcMessagePut</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[53]">svcMutexCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[57]">svcMutexRelease</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[55]">svcMutexWait</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[61]">svcPoolCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[59]">svcSemaphoreCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[5d]">svcSemaphoreRelease</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[5b]">svcSemaphoreWait</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[4f]">svcSignalClear</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[51]">svcSignalGet</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[4d]">svcSignalSet</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[4b]">svcSignalWait</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[29]">svcThreadCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[23]">svcThreadGetId</a> from rt_cmsis.o(.text) referenced 2 times from rt_cmsis.o(.text)
 <LI><a href="#[36]">svcThreadGetPriority</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[34]">svcThreadSetPriority</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[25]">svcThreadTerminate</a> from rt_cmsis.o(.text) referenced 2 times from rt_cmsis.o(.text)
 <LI><a href="#[32]">svcThreadYield</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[3a]">svcTimerCall</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[44]">svcTimerCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[3c]">svcTimerStart</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[3f]">svcTimerStop</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[6d]">sysMailAlloc</a> from rt_cmsis.o(.text) referenced 2 times from rt_cmsis.o(.text)
 <LI><a href="#[70]">sysMailFree</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[63]">sysPoolAlloc</a> from rt_cmsis.o(.text) referenced 2 times from rt_cmsis.o(.text)
 <LI><a href="#[65]">sysPoolFree</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[14]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[93]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[95]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[16]"></a>_main_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_conf_cm.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[87]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[96]"></a>os_set_env</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[92]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calloc_box
</UL>

<P><STRONG><a name="[97]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Sys_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_cm3.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEF_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEF_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm3.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>os_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
</UL>

<P><STRONG><a name="[11]"></a>job1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_ex2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_ex2.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>job2</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_ex2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = job2 &rArr; osSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_ex2.o(.constdata)
</UL>
<P><STRONG><a name="[13]"></a>job3</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_ex2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = job3
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_ex2.o(.constdata)
</UL>
<P><STRONG><a name="[10]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rtx_ex2.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[23]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>svcThreadTerminate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>svcThreadCreate</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>svcKernelStart</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = svcKernelStart &rArr; rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>osKernelStart</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[99]"></a>osKernelRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>svcThreadYield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcThreadYield &rArr; rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>svcThreadSetPriority</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcThreadSetPriority &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>svcThreadGetPriority</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>osThreadCreate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>osThreadGetId</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>osThreadTerminate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>osThreadYield</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;job2
</UL>

<P><STRONG><a name="[21]"></a>osThreadSetPriority</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>osThreadGetPriority</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>svcDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>osDelay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;job1
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>osWait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>svcTimerCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>svcTimerCreate</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>svcTimerStart</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = svcTimerStart &rArr; rt_timer_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>svcTimerStop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerStop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>sysTimerTick</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[9d]"></a>osTimerCreate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>osTimerStart</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>osTimerStop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>osTimerCall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[45]"></a>svcMessageGet</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>osMessageGet</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailGet
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[49]"></a>osTimerThread</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
</UL>

<P><STRONG><a name="[4b]"></a>svcSignalWait</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcSignalWait &rArr; rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>svcSignalSet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcSignalSet &rArr; rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>svcSignalClear</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcSignalClear
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_clr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>svcSignalGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSignalGet
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>osSignalSet</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;job2
</UL>

<P><STRONG><a name="[a0]"></a>osSignalClear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>osSignalGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>osSignalWait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;job3
</UL>

<P><STRONG><a name="[53]"></a>svcMutexCreate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>svcMutexWait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcMutexWait &rArr; rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>svcMutexRelease</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcMutexRelease &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>osMutexCreate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>osMutexWait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>osMutexRelease</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>svcSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>svcSemaphoreWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcSemaphoreWait &rArr; rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>svcSemaphoreRelease</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcSemaphoreRelease &rArr; rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>osSemaphoreCreate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>osSemaphoreWait</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>osSemaphoreRelease</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>

<P><STRONG><a name="[61]"></a>svcPoolCreate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcPoolCreate &rArr; _init_box
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>sysPoolAlloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_clr_box
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCAlloc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>sysPoolFree</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>osPoolCreate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>osPoolAlloc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
</UL>

<P><STRONG><a name="[67]"></a>osPoolCAlloc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
</UL>

<P><STRONG><a name="[68]"></a>osPoolFree</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolFree
</UL>

<P><STRONG><a name="[69]"></a>svcMessagePut</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessagePut &rArr; rt_mbx_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>osMessageCreate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>osMessagePut</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailPut
</UL>

<P><STRONG><a name="[6c]"></a>svcMailCreate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcMailCreate &rArr; _init_box
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>sysMailAlloc</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sysMailAlloc &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_clr_box
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCAlloc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>sysMailFree</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sysMailFree &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>osMailCreate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>osMailAlloc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
</UL>

<P><STRONG><a name="[78]"></a>osMailCAlloc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
</UL>

<P><STRONG><a name="[79]"></a>osMailFree</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
</UL>

<P><STRONG><a name="[7a]"></a>osMailPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[7b]"></a>osMailGet</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[7e]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[76]"></a>rt_dispatch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
</UL>

<P><STRONG><a name="[6f]"></a>rt_block</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_itv_wait
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
</UL>

<P><STRONG><a name="[33]"></a>rt_tsk_pass</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_same_rdy_prio
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadYield
</UL>

<P><STRONG><a name="[24]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[35]"></a>rt_tsk_prio</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadSetPriority
</UL>

<P><STRONG><a name="[2b]"></a>rt_tsk_create</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[27]"></a>rt_tsk_delete</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[31]"></a>rt_sys_init</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_PSP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[aa]"></a>rt_tsk_lock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_system.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>rt_tsk_unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
</UL>

<P><STRONG><a name="[1a]"></a>rt_pop_req</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
</UL>

<P><STRONG><a name="[1b]"></a>rt_systick</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
</UL>

<P><STRONG><a name="[18]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[4c]"></a>rt_evt_wait</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
</UL>

<P><STRONG><a name="[4e]"></a>rt_evt_set</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rt_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
</UL>

<P><STRONG><a name="[50]"></a>rt_evt_clr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_event.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalClear
</UL>

<P><STRONG><a name="[52]"></a>isr_evt_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[ac]"></a>rt_evt_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_event.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[6e]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
</UL>

<P><STRONG><a name="[73]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
</UL>

<P><STRONG><a name="[80]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[82]"></a>rt_get_same_rdy_prio</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>

<P><STRONG><a name="[85]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[83]"></a>rt_resort_prio</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
</UL>

<P><STRONG><a name="[81]"></a>rt_put_dly</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[8d]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[75]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
</UL>

<P><STRONG><a name="[71]"></a>rt_psq_enq</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
</UL>

<P><STRONG><a name="[2e]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMailCreate
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[6a]"></a>rt_mbx_send</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, rt_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mbx_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessagePut
</UL>

<P><STRONG><a name="[46]"></a>rt_mbx_wait</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, rt_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[41]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[42]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[48]"></a>isr_mbx_receive</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[8b]"></a>rt_mbx_psh</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, rt_mailbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[5a]"></a>rt_sem_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_semaphore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>

<P><STRONG><a name="[5e]"></a>rt_sem_send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_semaphore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
</UL>

<P><STRONG><a name="[5c]"></a>rt_sem_wait</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_semaphore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
</UL>

<P><STRONG><a name="[60]"></a>isr_sem_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_semaphore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[89]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[39]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[ad]"></a>rt_itv_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_time.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>rt_itv_wait</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rt_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[54]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>

<P><STRONG><a name="[58]"></a>rt_mut_release</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, rt_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>

<P><STRONG><a name="[56]"></a>rt_mut_wait</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
</UL>

<P><STRONG><a name="[62]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMailCreate
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPoolCreate
</UL>

<P><STRONG><a name="[b]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[91]"></a>_calloc_box</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rt_membox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_box
</UL>

<P><STRONG><a name="[c]"></a>rt_free_box</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_membox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[30]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[2a]"></a>rt_alloc_mem</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[28]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[7d]"></a>rt_init_stack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[74]"></a>rt_ret_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
</UL>

<P><STRONG><a name="[8f]"></a>rt_ret_val2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[86]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[84]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[7f]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[88]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[8c]"></a>rt_chk_robin</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_robin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[15]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ae]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[38]"></a>rt_ms2tick</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessagePut
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[3e]"></a>rt_timer_insert</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[3d]"></a>rt_timer_remove</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStop
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[40]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[26]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalGet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalClear
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetPriority
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadSetPriority
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[3b]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStop
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
</UL>

<P><STRONG><a name="[64]"></a>rt_clr_box</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
</UL>

<P><STRONG><a name="[7c]"></a>rt_init_context</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
